name: Build Xash3D Server

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-libraries:
    name: Build HLSDK Libraries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branch: [master, bot10]
        # Uncomment the line below when ready to add ARM64 support
        # arch: [amd64, arm64]
        arch: [amd64]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build HLSDK ${{ matrix.branch }} for ${{ matrix.arch }}
      run: |
        # Create temporary Dockerfile for library building
        cat > Dockerfile.libs << 'EOF'
        FROM debian:bookworm-slim
        
        RUN apt-get update && apt-get install -y \
            build-essential \
            cmake \
            git \
            pkg-config \
            && rm -rf /var/lib/apt/lists/*
        
        WORKDIR /build
        
        ARG BRANCH=master
        RUN git clone --depth 1 -b ${BRANCH} https://github.com/FWGS/hlsdk-portable.git hlsdk
        
        WORKDIR /build/hlsdk
        
        RUN mkdir build && cd build \
            && cmake .. -DCMAKE_BUILD_TYPE=Release -DGOLDSOURCE_SUPPORT=ON \
            && make -j$(nproc)
        
        # Create output directory structure
        RUN mkdir -p /output
        
        # Copy built libraries with appropriate naming
        RUN if [ "${BRANCH}" = "bot10" ]; then \
                cp build/dlls/hl.so /output/bot_$(uname -m | sed 's/x86_64/amd64/').so; \
            else \
                cp build/dlls/hl.so /output/hl_$(uname -m | sed 's/x86_64/amd64/').so; \
                cp build/cl_dll/client.so /output/client_$(uname -m | sed 's/x86_64/amd64/').so; \
            fi
        EOF
        
        # Build for specified architecture
        docker buildx build \
          --platform linux/${{ matrix.arch }} \
          --build-arg BRANCH=${{ matrix.branch }} \
          --output type=local,dest=./output \
          -f Dockerfile.libs .

    - name: Upload libraries as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: hlsdk-${{ matrix.branch }}-${{ matrix.arch }}
        path: output/
        retention-days: 30

  build-container:
    name: Build Container Image
    runs-on: ubuntu-latest
    needs: build-libraries
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        # Uncomment the line below when ready to add ARM64 support
        # platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-libraries
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Copy and rename files for release
        find artifacts/ -name "*.so" -exec cp {} release-assets/ \;
        
        # List files for verification
        echo "Release assets:"
        ls -la release-assets/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
