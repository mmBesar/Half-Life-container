#!/usr/bin/env bash
set -e

# Default values (override via env vars)
: "${HLSERVER_PORT:=27015}"                  # Server port
: "${HLSERVER_IP:=0.0.0.0}"                  # Bind IP
: "${HLSERVER_MAP:=stalkyard}"              # Initial map
: "${HLSERVER_MAXPLAYERS:=16}"              # Max player slots
: "${HLSERVER_BOTS:=false}"                 # Enable bots (Botman's bot10)
: "${HLSERVER_BOTS_COUNT:=5}"               # Number of bots to add
: "${HLSERVER_BOT_DIFFICULTY:=1}"           # 0-3 difficulty scale
: "${HLSERVER_BOT_CHATTER:=normal}"         # Bot chatter: off, minimal, normal
: "${HLSERVER_BOT_QUOTA_MODE:=fill}"        # fill, match, normal
: "${HLSERVER_BOT_JOIN_AFTER_PLAYER:=1}"    # Delay bot join until human joins?
: "${HLSERVER_BOT_PREFIX:=BOT}"             # Prefix for bot names
: "${HLSERVER_BOT_NAMES:=}"                 # Comma-separated bot names
: "${HLSERVER_FRAGLIMIT:=0}"                # Kill count limit
: "${HLSERVER_TIMELIMIT:=0}"                # Time limit (minutes)
: "${HLSERVER_MAPCYCLE:=}"                  # Comma-separated map list
: "${HLSERVER_GAME:=valve}"                 # Game directory name
: "${HLSDK_LIBS_PATH:=/opt/hlsdk-libs}"     # Path to server game DLLs
: "${XASH3D_BASE:=/opt/xash}"               # Path to xash binary
: "${HLSERVER_TICRATE:=10}"                 # Lower server tickrate


# Paths
game_path="/data/${HLSERVER_GAME}"
xash_bin="${XASH3D_BASE}/xash"

# Ensure game directory exists
if [ ! -d "$game_path" ]; then
  echo "‚ùå Game directory not found: $game_path" >&2
  exit 1
fi

# Determine architecture suffix (amd64 or arm64)
arch=$(uname -m)
case "$arch" in
  x86_64) suffix=amd64 ;;
  aarch64) suffix=arm64 ;;
  *) suffix=$arch ;;
esac

# Select the appropriate DLL (Bot10 or Master)
if [[ "$HLSERVER_BOTS" == "true" ]]; then
  dll_name="hl_bot_${suffix}.so"
else
  dll_name="hl_master_${suffix}.so"
fi

dll_path="${HLSDK_LIBS_PATH}/${dll_name}"
if [ ! -f "$dll_path" ]; then
  echo "‚ùå DLL not found: $dll_path" >&2
  exit 1
fi

# Generate bot.cfg for Bot10
if [[ "$HLSERVER_BOTS" == "true" ]]; then
  bot_cfg="$game_path/bot.cfg"
  echo "üóòÔ∏è Generating bot.cfg: $bot_cfg with $HLSERVER_BOTS_COUNT bots"
  {
    echo "// Auto-generated by entrypoint"
    echo "bot_quota $HLSERVER_BOTS_COUNT"
    echo "bot_quota_mode $HLSERVER_BOT_QUOTA_MODE"
    echo "bot_difficulty $HLSERVER_BOT_DIFFICULTY"
    echo "bot_chatter $HLSERVER_BOT_CHATTER"
    echo "bot_join_after_player $HLSERVER_BOT_JOIN_AFTER_PLAYER"
    echo "bot_prefix \"$HLSERVER_BOT_PREFIX\""
    if [[ -n "$HLSERVER_BOT_NAMES" ]]; then
      IFS=',' read -ra names <<< "$HLSERVER_BOT_NAMES"
      for name in "${names[@]}"; do
        echo "addbot \"$name\""
      done
    else
      for i in $(seq 1 "$HLSERVER_BOTS_COUNT"); do
        echo "addbot"
      done
    fi
  } > "$bot_cfg"
fi

# Generate mapcycle.txt if defined
if [[ -n "$HLSERVER_MAPCYCLE" ]]; then
  echo "üìÑ Generating mapcycle.txt"
  echo "$HLSERVER_MAPCYCLE" | tr ',' '\n' > "$game_path/mapcycle.txt"
fi

# Generate server.cfg with gameplay settings
server_cfg="$game_path/server.cfg"
echo "üìÑ Generating server.cfg"
{
  echo "// Auto-generated by entrypoint"
  echo "mp_fraglimit $HLSERVER_FRAGLIMIT"
  echo "mp_timelimit $HLSERVER_TIMELIMIT"
  echo "deathmatch 1"
  echo "mp_chattime 5"
  echo "skill $HLSERVER_BOT_DIFFICULTY"
} > "$server_cfg"

# Generate autoexec.cfg with fraglimit/timelimit
autoexec_cfg="$game_path/autoexec.cfg"
echo "üìÑ Generating autoexec.cfg"
{
  echo "// Auto-generated by entrypoint"
} > "$autoexec_cfg"

# Build command arguments
declare -a cmd
cmd=(
  -dll "$dll_path"
  -ip "$HLSERVER_IP"
  -port "$HLSERVER_PORT"
  +map "$HLSERVER_MAP"
  +maxplayers "$HLSERVER_MAXPLAYERS"
  +sys_ticrate "$HLSERVER_TICRATE"
  +developer 0
  +fps_override 0
)

# Launch the server
echo "üöÄ Launching: $xash_bin -game $HLSERVER_GAME ${cmd[*]}"
cd /data
exec "$xash_bin" -game "$HLSERVER_GAME" "${cmd[@]}"
