# Give the GITHUB_TOKEN permission to push packages
permissions:
  contents: read
  packages: write

name: Build, Push & Manifest Multi-Arch Image

on:
  push:
    paths:
      - '.github/workflows/image-build.yml'
      - 'Dockerfile'
  pull_request:
    paths:
      - '.github/workflows/image-build.yml'
      - 'Dockerfile'
  workflow_dispatch:

jobs:
  # Build HLSDK libraries for release
  build-libraries:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        branch: [master, bot10]
        arch: [amd64, arm64]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build HLSDK ${{ matrix.branch }} for ${{ matrix.arch }}
      run: |
        # Create temporary Dockerfile for library building
        cat > Dockerfile.libs << 'EOF'
        FROM debian:bookworm-slim
        
        RUN apt-get update && apt-get install -y \
            build-essential \
            cmake \
            git \
            pkg-config \
            gcc-multilib \
            g++-multilib \
            && rm -rf /var/lib/apt/lists/*
        
        WORKDIR /build
        
        ARG BRANCH=master
        RUN git clone --recursive --depth 1 -b ${BRANCH} https://github.com/FWGS/hlsdk-portable.git hlsdk
        
        WORKDIR /build/hlsdk
        
        RUN cmake -B build -DCMAKE_BUILD_TYPE=Release -DGOLDSOURCE_SUPPORT=ON \
            && cmake --build build -j$(nproc)
        
        # Create output directory structure
        RUN mkdir -p /output
        
        # Copy built libraries with appropriate naming
        RUN ARCH=$(uname -m | sed 's/x86_64/amd64/' | sed 's/aarch64/arm64/') && \
            if [ "${BRANCH}" = "bot10" ]; then \
                cp build/dlls/hl.so /output/bot_${ARCH}.so; \
            else \
                cp build/dlls/hl.so /output/hl_${ARCH}.so; \
                if [ -f build/cl_dll/client.so ]; then \
                    cp build/cl_dll/client.so /output/client_${ARCH}.so; \
                fi; \
            fi
        EOF
        
        # Build for specified architecture
        docker buildx build \
          --platform linux/${{ matrix.arch }} \
          --build-arg BRANCH=${{ matrix.branch }} \
          --output type=local,dest=./output \
          -f Dockerfile.libs .

    - name: Upload libraries as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: hlsdk-${{ matrix.branch }}-${{ matrix.arch }}
        path: output/
        retention-days: 30

  # 1) Build & push per-arch container images
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64]
        # Uncomment the line below when ready to add ARM64 support  
        # arch: [amd64, arm64]

    outputs:
      image_name: ${{ steps.lowercase.outputs.image_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Register QEMU for emulation
        uses: docker/setup-qemu-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute lowercase image name
        id: lowercase
        run: |
          IMAGE=$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')
          echo "image_name=$IMAGE" >> $GITHUB_OUTPUT

      - name: Build & push ${{ matrix.arch }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/${{ matrix.arch }}
          push: true
          tags: |
            ghcr.io/${{ steps.lowercase.outputs.image_name }}:latest-${{ matrix.arch }}
            ghcr.io/${{ steps.lowercase.outputs.image_name }}:${{ github.sha }}-${{ matrix.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 2) Assemble the multi-arch manifest
  manifest:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create multi-arch manifest
        run: |
          IMAGE=${{ needs.build.outputs.image_name }}
          docker buildx imagetools create \
            --tag ghcr.io/$IMAGE:latest \
            ghcr.io/$IMAGE:latest-amd64
            # Uncomment the line below when ARM64 is ready
            # ghcr.io/$IMAGE:latest-arm64

  # 3) Create release with library files
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-libraries
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Copy and organize files for release
        find artifacts/ -name "*.so" -exec cp {} release-assets/ \;
        
        # List files for verification
        echo "Release assets:"
        ls -la release-assets/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
