permissions:
  contents: write
  packages: write

name: Build All - Images & Releases

on:
  push:
    paths:
      - '.github/workflows/build.yml'
      - 'Dockerfile'
    tags:
      - 'v*'
  pull_request:
    paths:
      - '.github/workflows/build.yml'
      - 'Dockerfile'
  workflow_dispatch:

jobs:
  # 1) Build container images per-arch
  build-images:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64] # arm64 commented out for initial testing
        # arch: [amd64, arm64] # uncomment this line and comment above when ready for arm64

    outputs:
      image_name: ${{ steps.lowercase.outputs.image_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Register QEMU for emulation
        uses: docker/setup-qemu-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute lowercase image name
        id: lowercase
        run: |
          IMAGE=$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')
          echo "image_name=$IMAGE" >> $GITHUB_OUTPUT

      - name: Build & push ${{ matrix.arch }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/${{ matrix.arch }}
          push: true
          tags: |
            ghcr.io/${{ steps.lowercase.outputs.image_name }}:latest-${{ matrix.arch }}
            ghcr.io/${{ steps.lowercase.outputs.image_name }}:${{ github.sha }}-${{ matrix.arch }}

  # 2) Build individual library files for releases
  build-libraries:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        arch: [amd64] # arm64 commented out for initial testing
        # arch: [amd64, arm64] # uncomment this line and comment above when ready for arm64
        hlsdk_branch: [master, bot10]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Register QEMU for emulation
        uses: docker/setup-qemu-action@v3

      - name: Build libraries in container
        run: |
          # Create a temporary Dockerfile for building libraries
          cat > Dockerfile.libs << 'EOF'
          FROM debian:bookworm-slim
          
          RUN apt-get update && apt-get install -y \
              git \
              build-essential \
              cmake \
              python3 \
              python3-setuptools \
              pkg-config \
              libc6-dev \
              && rm -rf /var/lib/apt/lists/*
          
          WORKDIR /build
          EOF
          
          # Build the container and extract libraries
          docker buildx build \
            --platform linux/${{ matrix.arch }} \
            --load \
            -f Dockerfile.libs \
            -t hlsdk-builder:${{ matrix.arch }} .
          
          # Create output directory
          mkdir -p output
          
          # Run build process
          docker run --rm \
            --platform linux/${{ matrix.arch }} \
            -v $(pwd)/output:/output \
            hlsdk-builder:${{ matrix.arch }} \
            bash -c "
              echo 'Cloning HLSDK-portable ${{ matrix.hlsdk_branch }} branch...'
              git clone -b ${{ matrix.hlsdk_branch }} https://github.com/FWGS/hlsdk-portable.git
              cd hlsdk-portable
              
              echo 'Building with CMake...'
              mkdir build && cd build
              cmake .. -DCMAKE_BUILD_TYPE=Release
              make -j\$(nproc)
              
              echo 'Copying built libraries...'
              mkdir -p /output/${{ matrix.hlsdk_branch }}
              if [ '${{ matrix.hlsdk_branch }}' = 'master' ]; then
                cp dlls/hl.so /output/${{ matrix.hlsdk_branch }}/hl_${{ matrix.arch }}.so
                cp cl_dll/client.so /output/${{ matrix.hlsdk_branch }}/client_${{ matrix.arch }}.so
                echo 'Built master branch libraries'
              else
                cp dlls/hl.so /output/${{ matrix.hlsdk_branch }}/bot_${{ matrix.arch }}.so
                echo 'Built bot10 branch library'
              fi
              
              echo 'Build completed successfully'
              ls -la /output/${{ matrix.hlsdk_branch }}/
            "

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hlsdk-${{ matrix.hlsdk_branch }}-${{ matrix.arch }}
          path: output/${{ matrix.hlsdk_branch }}/

  # 3) Create multi-arch container manifest
  create-manifest:
    needs: build-images
    runs-on: ubuntu-latest

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create multi-arch manifest
        run: |
          IMAGE=${{ needs.build-images.outputs.image_name }}
          # For testing with amd64 only
          docker buildx imagetools create \
            --tag ghcr.io/$IMAGE:latest \
            ghcr.io/$IMAGE:latest-amd64
          
          # Uncomment below and comment above when arm64 is ready
          # docker buildx imagetools create \
          #   --tag ghcr.io/$IMAGE:latest \
          #   ghcr.io/$IMAGE:latest-amd64 \
          #   ghcr.io/$IMAGE:latest-arm64

  # 4) Create GitHub release with library files
  create-release:
    needs: build-libraries
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Organize release files
        run: |
          mkdir -p release-files/master release-files/bot10
          
          # Move master branch files
          find release-artifacts -name "hl_*.so" -exec cp {} release-files/master/ \;
          find release-artifacts -name "client_*.so" -exec cp {} release-files/master/ \;
          
          # Move bot10 branch files
          find release-artifacts -name "bot_*.so" -exec cp {} release-files/bot10/ \;
          
          # List files for verification
          echo "Master branch files:"
          ls -la release-files/master/
          echo "Bot10 branch files:"
          ls -la release-files/bot10/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-files/master/*
            release-files/bot10/*
          body: |
            ## Xash3D-FWGS Server Release
            
            This release contains both containerized server images and individual HLSDK library files.
            
            ### Container Images
            ```bash
            # Pull the server container
            docker pull ghcr.io/${{ needs.build-images.outputs.image_name }}:latest
            
            # Run with default settings
            docker run -p 27015:27015/udp ghcr.io/${{ needs.build-images.outputs.image_name }}:latest
            
            # Run with bots enabled
            docker run -p 27015:27015/udp -e HLSERVER_BOTS=true ghcr.io/${{ needs.build-images.outputs.image_name }}:latest
            ```
            
            ### Individual Library Files
            
            **Master Branch (Regular Half-Life)**
            - `hl_amd64.so` - Server library for AMD64
            - `client_amd64.so` - Client library for AMD64
            <!-- - `hl_arm64.so` - Server library for ARM64 (uncomment when ready) -->
            <!-- - `client_arm64.so` - Client library for ARM64 (uncomment when ready) -->
            
            **Bot10 Branch (With Bot Support)**
            - `bot_amd64.so` - Server library with bot support for AMD64
            <!-- - `bot_arm64.so` - Server library with bot support for ARM64 (uncomment when ready) -->
            
            ### Usage
            Place the appropriate `.so` files in your Xash3D game directory's `dlls/` folder.
          draft: false
          prerelease: false
